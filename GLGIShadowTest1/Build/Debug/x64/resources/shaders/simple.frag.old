#version 400 core

in vec4 Color;
in vec2 Tex;
in vec3 Normal;
in vec3 Position;

out vec4 fColor;

struct LightProperties{
	bool enabled;
	bool local;

	bool spot;
	vec3 ambient;
	vec3 color;
	vec3 position;

	vec3 halfVector;
	vec3 coneDirection;

	float spotCosCutoff;
	float spotExponent;
	float constantAttenuation;
	float linearAttenuation;
	float quadraticAttenuation;
};

struct Material {
	vec3 emission;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform mat4 mvpMatrix;
uniform sampler2DArray textureData;
uniform int textureID;

uniform vec3 EyeDirection;
const float strength = .00001;

const int MaxLights = 1;
const int MaxMats = 1;
const int MaterialIndex = 0;
uniform LightProperties Lights[MaxLights];
uniform Material materials[MaxMats];

void main()
{

	vec3 ambient = vec3(0.0);
	vec3 diffuse = vec3(0.0);
	vec3 specular = vec3(0.0);
	for (int light = 0; light < MaxLights; ++light){
		if(!Lights[light].enabled){
			continue;
		}
		//ambient += Lights[light].ambient;

		float diffangle = max(dot(normalize(Lights[light].position), normalize(Normal)), 0.0);
		
		float specangle = max(dot(normalize(Lights[light].halfVector), normalize(Normal)), 0.0);
		
		diffuse += Lights[light].color * diffangle;
		if(diffangle > 0.){
			specular += Lights[light].color * pow(specangle, materials[0].shininess);// * strength;
		}


	}

	vec4 tcolor = vec4(texture(textureData, vec3(Tex.x, Tex.y, textureID)));
	//vec3 rgb = min(tcolor.rgb * scatteredLight, vec3(1.0));
	vec3 rgb = min(tcolor.rgb * (ambient + diffuse) + specular, vec3(1.0));
	//fColor = min(tcolor * vec4(Lights[0].ambient, 1.0), vec4(1.0));
	fColor = vec4(rgb, tcolor.a);
	//fColor = vec4(1.0, 0. , 0., 1.);
}
